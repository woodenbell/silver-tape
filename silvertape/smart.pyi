from collections import dict_items, dict_keys, dict_values
from re import Pattern
from typing import Any, List, Iterator, Iterable, Callable, Optional, Union, Dict


def smart(obj: Union[SmartList, list, SmartDict, dict]) -> Union[SmartList, list, SmartDict, dict]: ...


class SmartList:
    def __init__(self, val: list):
        self._val = None  # type: list
        ...
    
    def __mul__(self, other: Union[int, Callable]) -> SmartList: ...
    
    def __add__(self, other: Union[Any, List[Any]]) -> SmartList: ...
    
    def __sub__(self, other: Union[Any, List[Any]]) -> SmartList: ...

    def __and__(self, other: List[Any]) -> SmartList: ...
    
    def __mod__(self, other: Union[Callable, Any]) -> SmartList: ...
    
    def __xor__(self, other: Union[List[Any], SmartList]): ...
    
    def __getitem__(self, item: Union[int, slice, list, Callable[[Any], bool]]) -> Union[SmartList, Any]: ...
    
    def __setitem__(self, key: int, value: Any): ...
    
    def __contains__(self, item: Any) -> bool: ...
    
    def __delitem__(self, key: int): ...
    
    def __iter__(self) -> Iterator: ...
    
    def __len__(self) -> int: ...
    
    def __eq__(self, other: List[Any]) -> bool: ...
    
    def __ne__(self, other: List[Any]) -> bool: ...
    
    def __lt__(self, other: List[Any]) -> bool: ...
    
    def __gt__(self, other: List[Any]) -> bool: ...
    
    def __le__(self, other: List[Any]) -> bool: ...
    
    def __ge__(self, other: List[Any]) -> bool: ...
    
    def __invert__(self) -> SmartList: ...
    
    def __hash__(self): ...
    
    def __reversed__(self) -> Iterator[Any]: ...
    
    def __repr__(self) -> str: ...
    
    def append(self, obj: Any): ...
        
    def clear(self): ...
        
    def copy(self) -> SmartList: ...
    
    def count(self, value: Any) -> int: ...
    
    def extend(self, iterable: Iterable[Any]): ...
    
    def index(self, value, start: int=0, stop: int=2147483647) -> int: ...
    
    def insert(self, index: int, obj: Any): ...
        
    def pop(self, index: int=-1) -> Any: ...
    
    def remove(self, value: Any): ...
        
    def reverse(self): ...
    
    def sort(self, key: Optional[Callable]=None, reverse: bool=False) -> SmartList: ...
    
    def sum(self) -> Union[float, int]: ...
    
    def avg(self) -> float: ...
    
    def find(self, cond: Callable[[Any], bool]) -> Any: ...
    
    def get_list(self) -> List[Any]: ...
    

class SmartDict:
    ...

    def __init__(self, val: dict):
        self._val = None  # type: dict
    
    def __getitem__(self, key: [Any, List[str]]) -> Any: ...
    
    def __setitem__(self, key, value: Any): ...
    
    def __delitem__(self, key: Any): ...
    
    def __contains__(self, item: Any) -> bool: ...
    
    def __add__(self, other: Dict[Any, Any]) -> SmartDict: ...
    
    def __mod__(self, other: Union[str, Pattern]) -> SmartDict: ...
    
    def __invert__(self) -> SmartDict: ...
    
    def __repr__(self) -> str: ...
    
    def flatten(self, joiner: str='-') -> SmartDict: ...
    
    def copy(self) -> SmartDict: ...
    
    def items(self) -> dict_items: ...
    
    def keys(self) -> dict_keys: ...
    
    def values(self) -> dict_values: ...
    
    def get_dict(self) -> Dict[Any, Any]: ...
